import psycopg2
import os
from dotenv import load_dotenv

# üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

# üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    return conn, cursor

# üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
def create_tables():
    conn, cursor = get_db_connection()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS meals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        date TEXT,
        time TEXT,
        description TEXT,
        calories INTEGER,
        proteins REAL,
        fats REAL,
        carbs REAL
    );
    ''')

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'meals' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
def save_to_db(user_id, date, time, description, calories=None, proteins=None, fats=None, carbs=None):
    print("üìù –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î:", user_id, date, time, description, calories, proteins, fats, carbs)
    try:
        conn, cursor = get_db_connection()
        cursor.execute('''
            INSERT INTO meals (user_id, date, time, description, calories, proteins, fats, carbs)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        ''', (user_id, date, time, description, calories, proteins, fats, carbs))
        conn.commit()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É!")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:", e)
    finally:
        cursor.close()
        conn.close()


# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
def get_meals(user_id, period="day"):
    conn, cursor = get_db_connection()

    if period == "day":
        time_filter = "date = CURRENT_DATE"
    elif period == "week":
        time_filter = "date >= CURRENT_DATE - INTERVAL '7 days'"
    elif period == "month":
        time_filter = "date >= CURRENT_DATE - INTERVAL '30 days'"
    else:
        time_filter = "TRUE"  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë

    cursor.execute(f'''
        SELECT date, time, description, calories, proteins, fats, carbs
        FROM meals
        WHERE user_id = %s AND {time_filter}
        ORDER BY date DESC, time DESC
    ''', (user_id,))

    meals = cursor.fetchall()
    cursor.close()
    conn.close()
    return meals

# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
def delete_meal(meal_id):
    conn, cursor = get_db_connection()

    cursor.execute("DELETE FROM meals WHERE id = %s", (meal_id,))
    conn.commit()
    cursor.close()
    conn.close()

# üöÄ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
if __name__ == "__main__":
    create_tables()

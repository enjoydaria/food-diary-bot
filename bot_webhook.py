from flask import Flask, request
import telebot
from datetime import datetime
import os
import json
from openai import OpenAI
from create_db import save_to_db  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "mysecret")  # —Å–µ–∫—Ä–µ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

# üìå –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç –∏ –ø–æ–º–æ—â—å
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
                          "üìå –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å—ä–µ–ª ‚Äî —è –æ–ø—Ä–µ–¥–µ–ª—é –ö–ë–ñ–£ –∏ —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ!")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_message(message):
    user_id = message.from_user.id
    text = message.text
    now = datetime.now()
    date = now.strftime("%Y-%m-%d")
    time = now.strftime("%H:%M")

    try:
        bot.send_message(user_id, "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å...")

        prompt = f"""
        –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –¥–ª—è: {text}. 
        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–æ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        –ï—Å–ª–∏ JSON –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–∞–º –∏—Å–ø—Ä–∞–≤—å –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:
        {{"calories": 0, "proteins": 0, "fats": 0, "carbs": 0}}
        """

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )

        result_text = response.choices[0].message.content or ""
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç GPT: {result_text!r}")

        if not result_text.strip():
            raise ValueError("–û—Ç–≤–µ—Ç –æ—Ç GPT –ø—É—Å—Ç–æ–π –∏–ª–∏ None")

        if "{" not in result_text:
            raise ValueError("–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç JSON-–æ–±—ä–µ–∫—Ç–∞")

        result_text = result_text[result_text.find("{"):].strip()

        try:
            nutrition = json.loads(result_text)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

        save_to_db(
            user_id,
            date,
            time,
            text,
            nutrition.get("calories"),
            nutrition.get("proteins"),
            nutrition.get("fats"),
            nutrition.get("carbs")
        )

        bot.reply_to(
            message,
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\nüìÖ {date} ‚è∞ {time}\nüçΩÔ∏è {text}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {nutrition.get('calories', '-')} –∫–∫–∞–ª\n"
            f"üí™ –ë–µ–ª–∫–∏: {nutrition.get('proteins', '-')} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {nutrition.get('fats', '-')} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {nutrition.get('carbs', '-')} –≥"
        )

    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")

# üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    photo = message.photo[-1]

    try:
        file_info = bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"

        bot.send_message(user_id, "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ, –∏ –ø–æ—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã).
–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –≤–∏–¥–∞:
{"description": "...", "calories": 0, "proteins": 0, "fats": 0, "carbs": 0}
–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": file_url
                            }
                        }
                    ]
                }
            ],
            max_tokens=200
        )

        result_text = response.choices[0].message.content or ""
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç GPT (—Ñ–æ—Ç–æ): {result_text!r}")

        if not result_text.strip():
            raise ValueError("–û—Ç–≤–µ—Ç –æ—Ç GPT –ø—É—Å—Ç–æ–π –∏–ª–∏ None")

        if "{" not in result_text:
            raise ValueError("–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç JSON-–æ–±—ä–µ–∫—Ç–∞")

        result_text = result_text[result_text.find("{"):].strip()

        try:
            nutrition = json.loads(result_text)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

        now = datetime.now()
        date = now.strftime("%Y-%m-%d")
        time_str = now.strftime("%H:%M")

        save_to_db(
            user_id,
            date,
            time_str,
            nutrition.get("description", "[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ]"),
            nutrition.get("calories"),
            nutrition.get("proteins"),
            nutrition.get("fats"),
            nutrition.get("carbs")
        )

        bot.send_message(
            user_id,
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ —Ñ–æ—Ç–æ:\nüìÖ {date} ‚è∞ {time_str}\nüçΩÔ∏è {nutrition.get('description', '-')}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {nutrition.get('calories', '-')} –∫–∫–∞–ª\n"
            f"üí™ –ë–µ–ª–∫–∏: {nutrition.get('proteins', '-')} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {nutrition.get('fats', '-')} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {nutrition.get('carbs', '-')} –≥"
        )

    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

# üìå Webhook –¥–ª—è Telegram
@app.route(f"/{WEBHOOK_SECRET}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

# üìå Health check
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üü¢", 200

# üìå –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
